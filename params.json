{"name":"Webstream","tagline":"MVC+ServiceによるWebアプリケーションフレームワーク","body":"# WebStream\r\nWebStreamはMVCアーキテクチャをベースとしたWebアプリケーションフレームワークです。\r\nさらにS(Service)層を追加した4層構造のアーキテクチャとなっています。\r\n\r\n##WebStreamのアーキテクチャ\r\nWebStreamはMVCを拡張したアーキテクチャを採用しており、Serviceレイヤを追加しています。\r\nMVCはFat Controller/Fat Model問題を引き起こしやすいアーキテクチャであるため、ビジネスロジックはServiceに定義します。\r\nまた、View内でビジネスロジックを書く場合はHelperを利用し、Viewはレンダリングに専念させます。  \r\n\r\n\r\n##[Controller](#controller)\r\nContollerではクライアントからのリクエストを受け付け、ServiceまたはModelを呼び出します。\r\nControllerの処理が完了したらViewを呼び出します。Viewへパラメータを渡す場合、Serviceにセットします。\r\n原則的にControllerにビジネスロジックを記述してはなりません。\r\n`app/controllers`に`WebStream\\Core\\CoreController`クラスを継承したクラスを定義します。  \r\n\r\n###Controllerクラスの定義\r\nControllerクラスは`\\WebStream\\Core\\CoreController`クラスを継承します。\r\nControllerクラスからはServiceクラスまたはModelクラスを参照できます。またViewテンプレートを呼び出して描画できます。\r\n\r\n####Serviceクラス、Modelクラス呼び出し\r\nServiceクラス、Modelクラスは以下のように呼び出します。\r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreController;\r\nclass BlogController extends CoreController {\r\n    public funciton execute() {\r\n        // $this->{ページ名}->(Service|Modelクラスのメソッド)\r\n        $this->Blog->entry();\r\n    }\r\n}\r\n```\r\n\r\nControllerクラス内の`$this->{ページ名}`オブジェクトにはServiceクラスまたはModelクラスのインスタンスが格納されています。Serviceクラスを定義している場合はServiceクラスインスタンスが格納されます。このときのページ名はアッパーキャメルケースで指定します。\r\nServiceクラスを定義せずModelクラスのみ定義した場合はModelクラスインスタンスが格納されます。Serviceクラスに特段のビジネスロジックを記述する必要がなく、DBからのデータを取り出したいだけの場合など、Controllerクラスから直接Modelクラスにアクセスすることができます。\r\nControllerクラスでは[アノテーション](#annotaion)を使ってメソッドやプロパティを操作できます。\r\n\r\n####Viewテンプレート呼び出し\r\nHTMLを描画するにはControllerからViewテンプレートを呼び出します。Viewテンプレート呼び出しは[アノテーション](#annotaion)を利用します。\r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreController;\r\n\r\n/**\r\n * @Inject\r\n * @Template(\"index.tmpl\")\r\n */\r\nclass BlogController extends CoreController {\r\n    public funciton execute() {\r\n        // $this->{ページ名}->(Service|Modelクラスのメソッド)\r\n        $this->Blog->entry();\r\n    }\r\n}\r\n```\r\n\r\nこの処理で`@Template`に指定したテンプレートファイル`index.tmpl`を呼び出します。\r\nテンプレートファイルは`app/views/(ページ名)/`に保存します。このときのページ名はスネークケースで指定します(詳細は[View](#view)で説明します)。\r\n\r\n\r\n##[Service](#service)\r\nServiceクラスではContollerクラスから受け取ったリクエストやデータを使って処理をしたり、View経由でビジネスロジックを実行します。\r\nメインとなるビジネスロジックはServiceに記述します。データベースへの問い合わせが必要な場合はModelへ問い合わせます。\r\nまた、Serviceでは開発者が個別に定義したクラス(ライブラリ)を利用することができます。Serviceで処理するロジックがない場合などはServiceを定義する必要はありません。\r\n`app/services`に`WebStream\\Core\\CoreService`クラスを継承したクラスを定義します。  \r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreService;\r\nclass BlogService extends CoreService {\r\n    public funciton entry() {\r\n        // $this->{ページ名}->(Modelクラスのメソッド)\r\n        $this->Blog->getEntryData();\r\n    }\r\n}\r\n```\r\n\r\nServiceクラス内の`$this->{ページ名}`オブジェクトにはModelクラスのインスタンスが格納されています。ModelクラスにアクセスしてDB処理を実行します。\r\nまた、ServiceクラスにはContoller、Service、Model、Helperの各クラスに属さないユーザ定義クラスへのパスが通っています。`app/libraries/`ディレクトリに任意のクラスを定義することでServiceクラスからアクセスできます。例えば、外部APIにアクセスするクラスや、データをバインドするEntityクラスなど特定用途のクラスはlibrariesに定義してください。\r\n\r\n\r\n##[Model](#model)\r\nModelクラスはControllerクラス、ServiceクラスまたはViewクラスからのリクエストや受け取ったデータを元にデータベースに問い合わせます。\r\nServiceクラスが定義されない場合はController、Viewから直接呼び出されます。Modelにはデータベース問い合わせ処理を記述します。\r\n`app/models`に`WebStream\\Core\\CoreModel`クラスを継承したクラスを定義します。  \r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreModel;\r\n/**\r\n * @Inject\r\n * @Database(driver=\"WebStream\\Database\\Driver\\Mysql\", config=\"config/database.mysql.ini\")\r\n */\r\nclass BlogModel extends CoreModel {\r\n    public funciton getEntryData() {\r\n        $sql = \"SELECT * FROM T_Blog\";\r\n        return $this->select($sql);\r\n    }\r\n}\r\n```\r\n\r\n外部変数をパラメータに指定するには`$bind`変数にパラメータをセットします。\r\n`$bind`変数には連想配列でプリペアードステートメントに設定する値を指定します。\r\nデータベース接続設定はクラスに[アノテーション](#annotaion)を指定します。\r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreModel;\r\n/**\r\n * @Inject\r\n * @Database(driver=\"WebStream\\Database\\Driver\\Mysql\", config=\"config/database.mysql.ini\")\r\n */\r\nclass BlogModel extends CoreModel {\r\n    public funciton getEntryData() {\r\n        $sql = \"SELECT * FROM T_Blog WHERE id = :id\";\r\n        $bind = [\"id\" => 10];\r\n        return $this->select($sql, $bind);\r\n    }\r\n}\r\n```\r\n\r\nModelクラスでは以下のメソッドが利用可能です。\r\n\r\n####Modelで利用可能なメソッド一覧\r\nメソッド                                                  |内容\r\n-------------------------------------------------------|----\r\nselect(string $sql)<br>select(string $sql, array $bind)|SELECTを実行する。\r\ninsert(string $sql, array $bind)                       |INSERTを実行する。\r\nupdate(string $sql, array $bind)                       |UPDATEを実行する。\r\ndelete(string $sql)<br>delete(string $sql, array $bind)|DELETEを実行する。\r\nbeginTransation()                                      |トランザクションを開始する。\r\ncommit()                                               |コミットする。\r\nrollback()                                             |ロールバックする。\r\nconnect()                                              |DBに接続する。\r\ndisconnect()                                           |DBを切断する。\r\n\r\n####クエリファイルによるSQL実行\r\nModelクラスでは直接SQLをメソッド内に記述する以外に、クエリファイル(XML)を使ってSQLを実行できます。クエリファイルは`query/`に保存します。\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!DOCTYPE mapper PUBLIC\r\n  \"-//github.com/mapserver2007//DTD Mapper 3.0//EN\" \"http://localhost/webstream-model-mapper.dtd\">\r\n<mapper namespace=\"MyBlog\">\r\n  <select id=\"getData\">\r\n    SELECT\r\n        *\r\n    FROM\r\n        T_Blog\r\n    WHERE\r\n        id = :id\r\n  </select>\r\n</mapper>\r\n```\r\nクエリファイルのDTDは同ディレクトリに配置し、DOCTYPEの値は適宜修正しDTDを指すようにします。\r\nmapperタグの`namespace`にModelクラスの名前空間を指定します。名前空間が一致すればModelクラスからクエリファイルを呼び出すことができます。\r\nmapperタグ配下にSQLを記述するタグを記述します。`<select>`、`<insert>`、`<update>`、`<delete>`タグが指定可能です。タグの`id`をModelクラスのメソッドからアクセスするとSQLを実行できます。\r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreModel;\r\n/**\r\n * @Inject\r\n * @Database(driver=\"WebStream\\Database\\Driver\\Mysql\", config=\"config/database.mysql.ini\")\r\n */\r\nclass BlogModel extends CoreModel {\r\n    /**\r\n     * @Inject\r\n     * @Query(file=\"query/myblog.xml\")\r\n     */\r\n    public funciton getEntryData() {\r\n        $bind = [\"id\" => 10];\r\n        return $this->getData($bind);\r\n    }\r\n}\r\n```\r\n####クエリファイルによるSQL実行結果をエンティティクラスにマッピングする\r\nクエリファイルの`<select>`タグの`entity`属性にクラスパスを設定すると、取得結果をマッピングすることができます。  \r\nModelクラスでは直接SQLをメソッド内に記述する以外に、クエリファイル(XML)を使ってSQLを実行できます。クエリファイルは`query/`に保存します。\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!DOCTYPE mapper PUBLIC\r\n  \"-//github.com/mapserver2007//DTD Mapper 3.0//EN\" \"http://localhost/webstream-model-mapper.dtd\">\r\n<mapper namespace=\"MyBlog\">\r\n  <select id=\"getData\" entity=\"\\MyBlog\\Entity\\BlogEntity\">\r\n    SELECT\r\n        title,\r\n        description\r\n    FROM\r\n        T_Blog\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n```php\r\nnamespace MyBlog\\Entity;\r\nclass BlogEntity {\r\n    private $title;\r\n    private $description;\r\n\r\n    public funciton getTitle() {\r\n        return $this->title;\r\n    }\r\n\r\n    public funciton getDescription() {\r\n        return $this->description;\r\n    }\r\n}\r\n```\r\n\r\nテーブルのカラム名とエンティティクラスのフィールド名には対応関係があり、それにしたがってマッピング定義する必要があります。\r\nエンティティクラスのフィールド名はローワーキャメルケースで定義すると、型を含めてマッピングが実行されます。\r\nテーブルのカラム名がスネークケースである場合、自動的に名前をローワーキャメルケースに変換した上でマッピングされます。カラム名がエンティティクラスのフィールド名にマッピングできない命名になっている場合、SQLのAS句で別名を付けて対応してください。\r\n\r\n####取得結果を配列にする\r\n`select`で取得した結果を配列に変換します。\r\n\r\n```php\r\n$this->select($sql, $bind)->toArray();\r\n```\r\n```php\r\n$this->getData($bind)->toArray();\r\n```\r\n\r\n####取得結果をエンティティにする\r\n`select`で取得した結果をエンティティに変換します。\r\n\r\n```php\r\n$entityClasspath = \"\\MyBlog\\Entity\\BlogEntity\";\r\n$this->select($sql, $bind)->toEntity($entityClasspath);\r\n```\r\n```php\r\n$entityClasspath = \"\\MyBlog\\Entity\\BlogEntity\";\r\n$this->getData($bind)->toEntity($entityClasspath);\r\n```\r\n\r\n[アノテーション](#annotaion)を使い、クエリファイルパスを指定します。これによりクエリファイルに記述したSQLが自動的に紐付けられます。\r\n\r\n####トランザクション処理\r\n`$this->beginTransation()`でトランザクションを開始し`$this->commit()`でコミット、`$this->rollback()`でロールバックを実行します。\r\nただし、DBMSがトランザクション処理に対応していない場合はトランザクション処理は有効になりません。\r\nなお、トランザクション処理を明示しない場合、処理が終了後、自動的にコミットを実行します。\r\n\r\n##[View](#view)\r\nViewは画面に出力するHTMLなどを描画し、Controllerクラスから呼ばれます。HTML等の描画はWebStream独自のテンプレート機能を利用します。\r\nViewからはHelperまたはModel、Serviceを呼び出してビジネスロジックを実行することができます。\r\nテンプレートファイルは`.tmpl`拡張子を付け、`app/views`にページ名をスネークケースに変換したフォルダを作成し保存します。\r\n`__cache`、`__public`、`__shared`フォルダを作成すると、それぞれテンプレートキャッシュファイル、静的ファイル、共通テンプレートファイルを使用することができます。\r\nViewにはModel/Serviceオブジェクトが渡されるので、Model、Serviceで取得した値やビジネスロジックの実行がViewで可能になります。\r\nModel/Serviceオブジェクトは`$model`変数に格納されます。また、Helperオブジェクトは`$helper`変数に格納されます。\r\n\r\nContollerクラスからViewテンプレートを呼び出します。`@Template`の仕様は[アノテーション](#annotaion)を参照してください。\r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreController;\r\n\r\n/**\r\n * テンプレートを呼び出す。\r\n * @Inject\r\n * @Template(\"index.tmpl\")\r\n */\r\nclass BlogController extends CoreController {\r\n    public funciton execute() {\r\n        $this->Blog->entry();\r\n    }\r\n}\r\n```\r\n\r\n`__shared`に保存した共通テンプレートを呼び出すことができます。\r\n共通点プレートはheaderやfooterなど共通になる部分を定義するときに使用します。\r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreController;\r\n\r\n/**\r\n * 基本テンプレートと共通テンプレートを呼び出す。\r\n * @Inject\r\n * @Template(\"index.tmpl\")\r\n * @Template(\"common.tmpl\", name=\"common\", type=\"shared\")\r\n */\r\nclass BlogController extends CoreController {\r\n    public funciton execute() {\r\n        $this->Blog->entry();\r\n    }\r\n}\r\n```\r\n\r\n共通テンプレートにするほどではないが、テンプレートを部品化したい場合、部分テンプレートとして呼び出すことができます。\r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreController;\r\n\r\n/**\r\n * 基本テンプレートと共通テンプレートを呼び出す。\r\n * @Inject\r\n * @Template(\"index.tmpl\")\r\n * @Template(\"side.tmpl\", name=\"side_menu\", type=\"parts\")\r\n */\r\nclass BlogController extends CoreController {\r\n    public funciton execute() {\r\n        $this->Blog->entry();\r\n    }\r\n}\r\n```\r\n\r\nViewテンプレートにはHTMLを記述しますが、Service/Modelの値などを埋め込むことができます。\r\n\r\n```html\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"ja\" lang=\"ja\">\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\r\n    <head>\r\n        <title>%H{$model->getTitle()}</title>\r\n    </head>\r\n    <body>\r\n        <div>%H{$model->getContent()}</div>\r\n        %T{$common}\r\n    </body>\r\n</html>\r\n```\r\n\r\n`$model`にアクセスするとServiceクラスまたはModelクラスにアクセスできます。また、`@Template`の`name`属性に指定した名前は変数としてアクセスできます。\r\nViewテンプレートでは以下の構文が使用可能です。\r\n\r\n###[Viewテンプレート構文](#template_keyword)\r\n構文     |説明\r\n---------|----\r\n%P{$hoge}|%P{}で囲ったPHPのコードを実行する。関数を実行する場合などに使用する。<br>ただし、関数の実行結果をreturnしても画面表示されない。また、関数内部で`echo`で標準出力した場合はエスケープされないので注意。<br>実行結果を伴わない関数の実行が必要な場合に使用する。\r\n%H{$hoge}|%H{}で囲った変数を安全な値にエスケープしてHTMLとして表示する。関数を実行する場合も使用可能で、returnで返却された結果をエスケープして画面表示する。<br>ただし、関数内部で`echo`で標準出力した場合はエスケープされないので注意。\r\n%J{$hoge}|%J{}で囲った変数を安全な値にエスケープしてJavaScriptコードとして評価する。関数を実行する場合も使用可能で、returnで返却された結果をエスケープして画面表示する。<br>ただし、関数内部で`echo`で標準出力した場合はエスケープされないので注意。\r\n%X{$hoge}|%X{}で囲った変数を安全な値にエスケープしてXMLとして評価する。関数を実行する場合も使用可能で、returnで返却された結果をエスケープして画面表示する。<br>ただし、関数内部で`echo`で標準出力した場合はエスケープされないので注意。\r\n%T{$template}|%T{}で囲ったテンプレートパスを読み込む。\r\n\r\n##[Helper](#helper)\r\nViewの描画に関するロジックが必要な場合はHelperを呼び出します。\r\nHelperクラスは`app/helpers`に`WebStream\\Core\\CoreHelper`クラスを継承したクラスを定義します。\r\n\r\n```php\r\nnamespace WebStream\\Test\\TestData\\Sample\\App\\Helper;\r\n\r\nuse WebStream\\Core\\CoreHelper;\r\nuse WebStream\\Core\\CoreService;\r\n\r\nclass TestHelperHelper extends CoreHelper\r\n{\r\n    public function help1()\r\n    {\r\n         return $this->help2($model->getName());\r\n    }\r\n}\r\n```\r\n\r\nHelperクラス内ではViewテンプレート内と同様に`$model`オブジェクトからModelクラス、Serviceクラスを呼び出すことができます。\r\nHelperクラスのメソッドは`$helper`オブジェクトにより呼び出します。\r\n\r\n```php\r\n$helper->method();\r\n```\r\n\r\nメソッド呼び出しにより、Viewテンプレートで必要なロジックを実行します。\r\nメソッドの戻り値はViewテンプレートに描画されますが、<a href=\"#template_keyword\">Viewテンプレート構文</a>によりエスケープして出力し、安全な値として出力する必要があります。\r\n\r\n```php\r\n%H{$helper->method()}\r\n```\r\n\r\nただし、Helper内で直接echoで出力するとエスケープされないので注意してください。\r\n\r\n## [命名規則まとめ](#naming_rule)\r\n各クラスの命名規則、保存場所のまとめは以下のとおりです。\r\n\r\nレイヤ      |サンプルクラス名    |保存場所\r\n----------|----------------|------\r\nController|SampleController|app/controllers/SampleController.php\r\nService   |SampleService   |app/services/SampleService.php\r\nModel     |SampleModel     |app/models/SampleModel.php\r\nView      |(任意の名前).tmpl|app/views/sample/(任意の名前).tmpl\r\nHelper    |SampleHelper    |app/helpers/SampleHelper.php\r\n\r\n上記レイヤに乗らない、開発者が独自に定義したいクラスを格納する階層を作成することができます。\r\n\r\nレイヤ      |サンプルクラス名    |保存場所\r\n----------|----------------|------\r\n独自レイヤ  |(任意の名前)     |app/(任意の場所)/(任意の名前).php\r\n\r\nエンティティマッピングで使用するエンティティクラスや外部APIを利用するためのクラスなどはここに定義します。\r\n\r\n##[ルーティング定義](#routing)\r\n###routes.php\r\nルーティング設定により、URI設計を行うことができます。ルーティングにはmod_rewiteが必要です。  \r\nルーティング定義は`config/routes.php`に記述します。  \r\n\r\n```php\r\nnamespace WebStream\\Router;\r\nRouter::setRule([\r\n    '/login' => 'sample#login'\r\n    '/blog/:id' => 'blog#entry'\r\n]);\r\n```\r\n\r\nルーティングルールは配列で定義し、キーにURIパス定義、バリューにクラス、アクション定義を記述します。誤った定義が記述された場合、例外が発生します。\r\n\r\n###URIパス定義\r\nURIパスは`/path/to`形式で定義します。またURIには変数の設定が可能で、`:value`形式で記述します。例えば、`/blog/:id`と定義し、`/blog/10`にアクセスした場合、Controllerクラスでは以下の方法で値を取得出来ます。\r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreController;\r\nclass BlogController extends CoreController {\r\n    public function execute(array $params) {\r\n        $id = $params['id']; // 10\r\n    }\r\n}\r\n```\r\n\r\n##バリデーション定義\r\n\r\n###validates.php\r\nバリデーション設定により、GET/POST/PUT/DELETEリクエストに含まれるパラメータをチェックすることができます。  \r\nバリデーション定義は`config/validates.php`に記述します。  \r\n\r\n```php\r\nnamespace WebStream\\Validator;\r\nValidator::setRule([\r\n    \"sample#validateForm\" => [\r\n        \"post#name\" => \"required\",\r\n        \"get#page\"  => \"required|number\"\r\n    ]\r\n]);\r\n```\r\n\r\nValidator::setRule内にバリデーション定義を記述します。\r\n定義は、キーにクラス#アクション、バリューにバリデーション内容を記述します。バリデーション内容もキー、バリュー形式になっており、キーにリクエストメソッド#パラメータ名、バリューにチェックルールを記述します。\r\n\r\n####バリデーションチェックルール\r\n\r\nルール        |内容\r\n-------------|---------\r\nrequired     |必須チェック\r\nnumber       |数値チェック(整数)\r\nmin[n]       |最小値チェック(整数)\r\nmax[n]       |最大値チェック(整数)\r\nmin_length[n]|最小文字数チェック(整数)\r\nmax_length[n]|最大文字数チェック(整数)\r\nequal        |文字列一致チェック\r\nlength       |文字数一致チェック\r\nrange[n..m]  |範囲チェック(整数)\r\nregexp[//]   |正規表現チェック\r\n\r\n##リクエストパラメータ\r\nGET/POST/PUT/DELETEで送信した値をControllerで取得できます。\r\n`$this->request`オブジェクトからリクエストパラメータを取得でき、`get`,`post`,`put`,`delete`メソッドにそれぞれアクセスします。\r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreController;\r\nclass BlogController extends CoreController {\r\n    public function execute() {\r\n        $getParams = $this->request->get(); // GETパラメータすべて取得\r\n        $getParam  = $this->request->get(\"name\");\r\n    }\r\n}\r\n```\r\n\r\n##セッション\r\nログイン処理などを実装するときに、セッション管理を使用しますが、WebStreamでは`$this->session`オブジェクトを使用します。セッション期限を指定するには`restart`メソッドを使用します。\r\n\r\n```php\r\nnamespace MyBlog;\r\nuse WebStream\\Core\\CoreController;\r\nclass LoginController extends CoreController {\r\n    public function execute() {\r\n        $expire = 6000; // 10分\r\n        $path = \"/login\";\r\n        $domain = \".mydomain.com\";\r\n        $getParams = $this->session->restart($expire, $path, $domain);\r\n    }\r\n}\r\n```\r\n\r\nセッションがタイムアウトした場合、`SessionTimeoutException`が発生します。\r\n\r\n##<a href=\"annotaion\"> アノテーション </a>\r\nControllerとModelではアノテーションを使ってクラスやメソッドを操作することができます。アノテーションを利用することで便利な処理が可能になります。\r\nクラスまたはメソッドに対するアノテーションは`@Inject`、プロパティに対するアノテーションは`@Autowired`の指定が必須です。\r\n\r\n\r\nアノテーション  |説明\r\n-----------|----\r\n@Inject    |メソッドに対するアノテーションを有効にする\r\n@Autowired |プロパティに対するアノテーションを有効にする\r\n\r\n\r\n####Controllerで使用可能なアノテーション\r\nアノテーション        |説明                                         |サンプル\r\n-----------------|---------------------------------------------|------\r\n@Value           |プロパティに初期値(文字列、数値)を設定する           |@Value(10)<br>@Value(\"hoge\")\r\n@Type            |プロパティに指定した型で初期化する                   |@Type(\"\\MyBlog\\Entity\")\r\n@Filter          |アクションメソッドが呼ばれる前または後に任意の処理を実行する|@Filter(type=\"before\")<br>@Filter(type=\"after\")<br>@Filter(type=\"before\" except=\"method1\")<br>@Filter(type=\"before\" only=\"method2\")<br>@Filter(type=\"before\",only=\"method1\",except=\"method2\")<br>@Filter(type=\"after\",except={\"method1\",\"method2\"})\r\n@Header          |リクエスト/レスポンスを制御する                       |@Header(contentType=\"html\")<br>@Header(contentType=\"xml\")<br>@Header(allowMethod=\"POST\")<br>@Header(allowMethod={\"GET\",\"POST\"})\r\n@Template        |Viewテンプレートを設定する                         |@Template(\"index.tmpl\")<br>@Template(\"index.tmpl\",name=\"head\" type=\"parts\")<br>@Template(\"index.tmpl\",name=\"shared\",type=\"shared\")\r\n@TemplateCache   |テンプレートをキャッシュする時間を指定                  |@TemplateCache(expire=3600)\r\n@ExceptionHandler|例外を補足して別処理を実行する                     |@ExceptionHandler(\"\\Exception\")<br>@ExceptionHandler({\"\\RuntimeException\",\"\\LogicException\"})\r\n\r\n####Modelで使用可能なアノテーション\r\nアノテーション  |説明                           |サンプル\r\n-----------|-------------------------------|------\r\n@Database  |Modelクラスに対してデータベース設定をする|@Database(driver=\"WebStream\\Database\\Driver\\Mysql\", config=\"config/database.mysql.ini\")\r\n@Query     |読み込むクエリファイルを指定する        |@Query(file=\"query/blog_query.xml\")\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}