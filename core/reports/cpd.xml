<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd version="phpcpd 1.3.5">
  <duplication lines="26" tokens="27">
    <file path="/Users/stay/workspace2/WebStream/./core/Response.php" line="47"/>
    <file path="/Users/stay/workspace2/WebStream/./sandbox/Response.php" line="52"/>
    <codefragment>    public function setCharset($charset) {
        $this-&gt;charset = $charset;
    }

    /**
     * Cache-Controlを設定
     * @param String Cache-Control
     */
    public function setCacheControl($cacheControl) {
        $this-&gt;cacheControl = $cacheControl;
    }

    /**
     * Pragmaを設定
     * @param String Pragma
     */
    public function setPragma($pragma) {
        $this-&gt;pragma = $pragma;
    }

    /**
     * MimeTypeを設定
     * ファイルタイプにより指定
     * @param String ファイルタイプ
     */
    public function setType($fileType) {
</codefragment>
  </duplication>
  <duplication lines="144" tokens="341">
    <file path="/Users/stay/workspace2/WebStream/./core/Response.php" line="203"/>
    <file path="/Users/stay/workspace2/WebStream/./sandbox/Response.php" line="205"/>
    <codefragment>        $headerMessage = 'HTTP/' . self::HTTP_VERSION . ' ' .
                         $this-&gt;statusCode . ' ' . $this-&gt;status[$this-&gt;statusCode];
        header($headerMessage);


        // Redirect
        if (intval($this-&gt;statusCode) === 301) {
            header('Location: ' . $this-&gt;location);
        }

        // Content-Type
        header('Content-Type: ' . $this-&gt;mimeType . '; charset=' . $this-&gt;charset);

        // Content-Length
        if ($this-&gt;contentLength === null) {
            $this-&gt;contentLength = Utility::bytelen($this-&gt;body);
        }
        header('Content-Length: ' . $this-&gt;contentLength);

        // Content-Disposition
        if ($this-&gt;contentDisposition !== null) {
            header('Content-Disposition: ' . $this-&gt;contentDisposition);
        }

        // Content-Transfer-Encoding
        if ($this-&gt;contentTransferEncoding !== null) {
            header('Content-Transfer-Encoding: ' . $this-&gt;contentTransferEncoding);
        }

        // Cache-Control
        header('Cache-Control: ' . $this-&gt;cacheControl);

        // Pragma
        header('Pragma: ' . $this-&gt;pragma);

        // Expires
        if ($this-&gt;expires !== null) {
            header('Expires: ' . $this-&gt;expires);
        }

        // X-Content-Type-Options
        header("X-Content-Type-Options: nosniff");

        // Access-Control-Allow-Origin
        if (!empty($this-&gt;accessControlAllowOrigin)) {
            header('Access-Control-Allow-Origin: ' . implode(',', $this-&gt;accessControlAllowOrigin));
        }

        // X-Frame-Options
        if ($this-&gt;xframeOptions !== null) {
            header('X-Frame-Options: ' . $this-&gt;xframeOptions);
        }

        // X-XSS-Protection
        if ($this-&gt;xxssProtection !== null) {
            header('X-XSS-Protection: ' . $this-&gt;xxssProtection);
        }

        Logger::info("HTTP access occured: status code " . $this-&gt;statusCode);
    }

    /**
     * レスポンスボディを送出する
     */
    public function body() {
        // バイナリ系、その他のファイルはダウンロードする
        if ($this-&gt;file !== null) {
            ob_clean();
            flush();
            readfile($this-&gt;file);
        }
        // テキスト系は画面に表示する
        else {
            echo $this-&gt;body;
        }
    }

    /**
     * Mime-Type
     */
    private $mime = array(
        'txt'   =&gt; 'text/plain',
        'jpeg'  =&gt; 'image/jpeg',
        'jpg'   =&gt; 'image/jpeg',
        'gif'   =&gt; 'image/gif',
        'png'   =&gt; 'image/png',
        'tiff'  =&gt; 'image/tiff',
        'tif'   =&gt; 'image/tiff',
        'bmp'   =&gt; 'image/bmp',
        'ico'   =&gt; 'image/x-icon',
        'svg'   =&gt; 'image/svg+xml',
        'xml'   =&gt; 'application/xml',
        'xsl'   =&gt; 'application/xml',
        'rss'   =&gt; 'application/rss+xml',
        'rdf'   =&gt; 'application/rdf+xml',
        'atom'  =&gt; 'application/atom+xml',
        'zip'   =&gt; 'application/zip',
        'html'  =&gt; 'text/html',
        'htm'   =&gt; 'text/html',
        'css'   =&gt; 'text/css',
        'csv'   =&gt; 'text/csv',
        'js'    =&gt; 'text/javascript',
        'jsonp' =&gt; 'text/javascript',
        'json'  =&gt; 'application/json',
        'pdf'   =&gt; 'application/pdf',
        'file'  =&gt; 'application/octet-stream'
    );

    /**
     * Status
     */
    protected $status = array(
        '100' =&gt; 'Continue',
        '101' =&gt; 'Switching Protocols',
        '102' =&gt; 'Processing',
        '200' =&gt; 'OK',
        '201' =&gt; 'Created',
        '202' =&gt; 'Accepted',
        '203' =&gt; 'Non-Authoritative Information',
        '204' =&gt; 'No Content',
        '205' =&gt; 'Reset Content',
        '206' =&gt; 'Partial Content',
        '207' =&gt; 'Multi-Status',
        '208' =&gt; 'Already Reported',
        '226' =&gt; 'IM Used',
        '300' =&gt; 'Multiple Choices',
        '301' =&gt; 'Moved Permanently',
        '302' =&gt; 'Found',
        '303' =&gt; 'See Other',
        '304' =&gt; 'Not Modified',
        '305' =&gt; 'Use Proxy',
        '307' =&gt; 'Temporary Redirect',
        '400' =&gt; 'Bad Request',
        '401' =&gt; 'Unauthorized',
        '402' =&gt; 'Payment Required',
        '403' =&gt; 'Forbidden',
        '404' =&gt; 'Not Found',
        '405' =&gt; 'Method Not Allowed',
        '406' =&gt; 'Not Acceptable',
        '407' =&gt; 'Proxy Authentication Required',
        '408' =&gt; 'Request Timeout',
        '409' =&gt; 'Conflict',
        '410' =&gt; 'Gone',
        '411' =&gt; 'Length Required',
</codefragment>
  </duplication>
  <duplication lines="11" tokens="22">
    <file path="/Users/stay/workspace2/WebStream/./core/Response.php" line="381"/>
    <file path="/Users/stay/workspace2/WebStream/./sandbox/Response.php" line="402"/>
    <codefragment>    public function movePermanently($url) {
        $this-&gt;setLocation($url);
        $this-&gt;setStatusCode(301);
        $this-&gt;send();
    }

    /**
     * 400 alias
     */
    public function badRequest() {
        $this-&gt;move(400);
</codefragment>
  </duplication>
</pmd-cpd>
